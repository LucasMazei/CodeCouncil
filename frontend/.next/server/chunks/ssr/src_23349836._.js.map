{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/mazei/Acer/Users/mazei/Documents/Programming/CodeCouncil/frontend/src/constants/mock-api.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n// ðŸ›‘ Nothing in here has anything to do with Nextjs, it's just a fake database\n////////////////////////////////////////////////////////////////////////////////\n\nimport { faker } from '@faker-js/faker';\nimport { matchSorter } from 'match-sorter'; // For filtering\n\nexport const delay = (ms: number) =>\n  new Promise((resolve) => setTimeout(resolve, ms));\n\n// Define the shape of Product data\nexport type Product = {\n  photo_url: string;\n  name: string;\n  description: string;\n  created_at: string;\n  price: number;\n  id: number;\n  category: string;\n  updated_at: string;\n};\n\n// Mock product data store\nexport const fakeProducts = {\n  records: [] as Product[], // Holds the list of product objects\n\n  // Initialize with sample data\n  initialize() {\n    const sampleProducts: Product[] = [];\n    function generateRandomProductData(id: number): Product {\n      const categories = [\n        'Electronics',\n        'Furniture',\n        'Clothing',\n        'Toys',\n        'Groceries',\n        'Books',\n        'Jewelry',\n        'Beauty Products'\n      ];\n\n      return {\n        id,\n        name: faker.commerce.productName(),\n        description: faker.commerce.productDescription(),\n        created_at: faker.date\n          .between({ from: '2022-01-01', to: '2023-12-31' })\n          .toISOString(),\n        price: parseFloat(faker.commerce.price({ min: 5, max: 500, dec: 2 })),\n        photo_url: `https://api.slingacademy.com/public/sample-products/${id}.png`,\n        category: faker.helpers.arrayElement(categories),\n        updated_at: faker.date.recent().toISOString()\n      };\n    }\n\n    // Generate remaining records\n    for (let i = 1; i <= 20; i++) {\n      sampleProducts.push(generateRandomProductData(i));\n    }\n\n    this.records = sampleProducts;\n  },\n\n  // Get all products with optional category filtering and search\n  async getAll({\n    categories = [],\n    search\n  }: {\n    categories?: string[];\n    search?: string;\n  }) {\n    let products = [...this.records];\n\n    // Filter products based on selected categories\n    if (categories.length > 0) {\n      products = products.filter((product) =>\n        categories.includes(product.category)\n      );\n    }\n\n    // Search functionality across multiple fields\n    if (search) {\n      products = matchSorter(products, search, {\n        keys: ['name', 'description', 'category']\n      });\n    }\n\n    return products;\n  },\n\n  // Get paginated results with optional category filtering and search\n  async getProducts({\n    page = 1,\n    limit = 10,\n    categories,\n    search\n  }: {\n    page?: number;\n    limit?: number;\n    categories?: string;\n    search?: string;\n  }) {\n    await delay(1000);\n    const categoriesArray = categories ? categories.split('.') : [];\n    const allProducts = await this.getAll({\n      categories: categoriesArray,\n      search\n    });\n    const totalProducts = allProducts.length;\n\n    // Pagination logic\n    const offset = (page - 1) * limit;\n    const paginatedProducts = allProducts.slice(offset, offset + limit);\n\n    // Mock current time\n    const currentTime = new Date().toISOString();\n\n    // Return paginated response\n    return {\n      success: true,\n      time: currentTime,\n      message: 'Sample data for testing and learning purposes',\n      total_products: totalProducts,\n      offset,\n      limit,\n      products: paginatedProducts\n    };\n  },\n\n  // Get a specific product by its ID\n  async getProductById(id: number) {\n    await delay(1000); // Simulate a delay\n\n    // Find the product by its ID\n    const product = this.records.find((product) => product.id === id);\n\n    if (!product) {\n      return {\n        success: false,\n        message: `Product with ID ${id} not found`\n      };\n    }\n\n    // Mock current time\n    const currentTime = new Date().toISOString();\n\n    return {\n      success: true,\n      time: currentTime,\n      message: `Product with ID ${id} found`,\n      product\n    };\n  }\n};\n\n// Initialize sample products\nfakeProducts.initialize();\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 134, "column": 0}, "map": {"version":3,"sources":["file:///home/mazei/Acer/Users/mazei/Documents/Programming/CodeCouncil/frontend/src/features/overview/components/area-graph.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const AreaGraph = registerClientReference(\n    function() { throw new Error(\"Attempted to call AreaGraph() from the server but AreaGraph is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/features/overview/components/area-graph.tsx <module evaluation>\",\n    \"AreaGraph\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,YAAY,CAAA,GAAA,oXAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,iFACA","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///home/mazei/Acer/Users/mazei/Documents/Programming/CodeCouncil/frontend/src/features/overview/components/area-graph.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const AreaGraph = registerClientReference(\n    function() { throw new Error(\"Attempted to call AreaGraph() from the server but AreaGraph is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/features/overview/components/area-graph.tsx\",\n    \"AreaGraph\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,YAAY,CAAA,GAAA,oXAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,6DACA","debugId":null}},
    {"offset": {"line": 162, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 172, "column": 0}, "map": {"version":3,"sources":["file:///home/mazei/Acer/Users/mazei/Documents/Programming/CodeCouncil/frontend/src/app/dashboard/overview/%40area_stats/page.tsx"],"sourcesContent":["import { delay } from '@/constants/mock-api';\nimport { AreaGraph } from '@/features/overview/components/area-graph';\n\nexport default async function AreaStats() {\n  await await delay(2000);\n  return <AreaGraph />;\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAEe,eAAe;IAC5B,MAAM,MAAM,CAAA,GAAA,+HAAA,CAAA,QAAK,AAAD,EAAE;IAClB,qBAAO,6WAAC,2JAAA,CAAA,YAAS;;;;;AACnB","debugId":null}}]
}